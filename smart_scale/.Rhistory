paste(c(1,2,3))
paste(c(1,2,3), collapse=NA)
paste('Hi!', c(1,2,3))
paste('Hi!', c(1,2,3), collapse=' ')
paste('Hi!', paste(c(1,2,3), collapse=' '))
library(restriktor) # Used for the constrained regression.
library(ggplot2)
library(gridExtra)
data <- read.csv('ss-data.csv')
# --------------- Part 1: Data Preprocessing --------------------------
recode <- function(vec, from.vals, to.vals) {
f = function(v) {
for(i in 1:length(from.vals)) {
if(v == from.vals[i]) { return(to.vals[i]) }
}
return(v)
}
return(sapply(as.vector(vec), f))
}
# Function for imputing mean of a vector to its missing values.
impute.mean <- function(vec) {
vec[is.na(vec)] = mean(vec, na.rm=TRUE)
vec
}
# Function for imputing value of 0 to each missing value in the vector.
impute.0 <- function(vec) {
vec[is.na(vec)] = 0
vec
}
# Clean and recode numeric columns.
numeric.columns <- colnames(data)[8:ncol(data)]
for(col in numeric.columns) {
data[[col]] <- as.numeric(as.character(data[[col]]))
}
imputer.f <- impute.0 # Missing value imputation function - can change if needed
# Impute missing values to component scores and print out the percent missing in each column.
for(i in 8:ncol(data)) {
message(paste('Percent Missing Values for Column ', colnames(data)[i], ': ',
round(100*(1 - (length(sort(data[[i]]))/nrow(data))), 2)))
data[[i]] <- imputer.f(data[[i]])
}
# Properly binarize binary columns.
data$Statewide.High.Priority <- as.numeric(sapply(data$Statewide.High.Priority, function(x){if(x == 'x') return(1); return(0);}))
data$District.Grant <- as.numeric(sapply(data$District.Grant, function(x){if(x == 'x') return(1); return(0);}))
fb <- subset(data, District='Fredericksburg')
nrow(fb)
fb <- subset(data, District=='Fredericksburg')
nrow(fb)
fb$Area.Type
View(fb)
colnames(fb)
fb$Access.to.Jobs
max(data$Access.to.Jobs)
max(fb$Access.to.Jobs)
aggregate(Access.to.Jobs ~ Area.type, data, FUN=mean)
aggregate(data$Access.to.Jobs ~ data$Area.type, FUN=mean)
aggregate(data$Access.to.Jobs ~ data$Area.Type, FUN=mean)
ceiling(12.3)
75/45
â™¦
bin(1:100, 10)
bincode
.bincode
.bincode(1:100, 10)
cut(1:100, 5)
range
sapply(1:100, function(x){x <= 10})
sapply(1:100, function(x){as.numeric(x <= 10)})
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
f <- function(x) {sum(sapply(v, function(y){is.numeric(y <= ranges[1])}))}
counts[1] <- f(v)
}
else if(i <= length(ranges)) {
f <- function(x) {sum(sapply(v, function(y){is.numeric((y <= ranges[i]) & (y > ranges[i-1]))}))}
counts[i] <- f(v)
}
else {
f <- function(x) {sum(sapply(v, function(y){is.numeric(y > ranges[i-1])}))}
counts[i] <- f(v)
}
}
}
tabulate.by.ranges(1:100, c(2, 30, 90))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
f <- function(x) {sum(sapply(v, function(y){is.numeric(y <= ranges[1])}))}
counts[1] <- f(v)
}
else if(i <= length(ranges)) {
f <- function(x) {sum(sapply(v, function(y){is.numeric((y <= ranges[i]) & (y > ranges[i-1]))}))}
counts[i] <- f(v)
}
else {
f <- function(x) {sum(sapply(v, function(y){is.numeric(y > ranges[i-1])}))}
counts[i] <- f(v)
}
}
counts
}
tabulate.by.ranges(1:100, c(2, 30, 90))
1:100 <= 10
sum((1:100 >= 10) & (1:100 < 30))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else if(i <= length(ranges)) {
counts[i] <- sum((v > ranges[i-1]) & (v <= ranges[i]))
}
else {
counts[i] <- sum(v > ranges[i])
}
}
counts
}
tabulate.by.ranges(1:100, c(2, 30, 90))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else if(i <= length(ranges)) {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
else {
counts[i] <- sum(v > ranges[i - 1])
}
}
counts
}
tabulate.by.ranges(1:100, c(2, 30, 90))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else(i <= length(ranges)) {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
}
counts
}
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:length(ranges)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
}
counts
}
tabulate.by.ranges(1:100, c(2, 30, 90))
tabulate.by.ranges(1:100, c(2, 30, 90, 100))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else if(i <= length(ranges)) {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
else {
counts[i] <- sum(v > ranges[i - 1])
}
}
counts
}
tabulate.by.ranges(1:100, c(2, 30, 90))
library(restriktor) # Used for the constrained regression.
library(ggplot2)
library(gridExtra)
data <- read.csv('ss-data.csv')
# --------------- Part 1: Data Preprocessing --------------------------
recode <- function(vec, from.vals, to.vals) {
f = function(v) {
for(i in 1:length(from.vals)) {
if(v == from.vals[i]) { return(to.vals[i]) }
}
return(v)
}
return(sapply(as.vector(vec), f))
}
# Function for imputing mean of a vector to its missing values.
impute.mean <- function(vec) {
vec[is.na(vec)] = mean(vec, na.rm=TRUE)
vec
}
# Function for imputing value of 0 to each missing value in the vector.
impute.0 <- function(vec) {
vec[is.na(vec)] = 0
vec
}
# Clean and recode numeric columns.
numeric.columns <- colnames(data)[8:ncol(data)]
for(col in numeric.columns) {
data[[col]] <- as.numeric(as.character(data[[col]]))
}
imputer.f <- impute.0 # Missing value imputation function - can change if needed
# Impute missing values to component scores and print out the percent missing in each column.
for(i in 8:ncol(data)) {
message(paste('Percent Missing Values for Column ', colnames(data)[i], ': ',
round(100*(1 - (length(sort(data[[i]]))/nrow(data))), 2)))
data[[i]] <- imputer.f(data[[i]])
}
# Properly binarize binary columns.
data$Statewide.High.Priority <- as.numeric(sapply(data$Statewide.High.Priority, function(x){if(x == 'x') return(1); return(0);}))
data$District.Grant <- as.numeric(sapply(data$District.Grant, function(x){if(x == 'x') return(1); return(0);}))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:(length(ranges) + 1)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
}
counts
}
tabulate.by.ranges(1:100, 10, 15, 100)
tabulate.by.ranges(1:100, c(10, 15, 100))
tabulate.by.ranges <- function(v, ranges) {
counts <- c()
ranges <- sort(ranges)
i <- 1
for(i in 1:length(ranges)) {
if(i == 1) {
counts[1] <- sum(v <= ranges[1])
}
else {
counts[i] <- sum((v > ranges[i - 1]) & (v <= ranges[i]))
}
}
counts
}
tabulate.by.ranges(1:100, c(10, 15, 100))
?t.test
z.test
1:100
se1(1, 100, by=1.3)
seq(1, 100, by=1.3)
seq(100, 1, by=-1.3)
rep(8, 20)
rep(c(1,3,5), 20)
v <- 1:99
v[100] <- NA
v
mean(v)
mean(v, na.rm=TRUE)
str.1 <- "This is some text data"
paste(str1, 'So is this')
paste(str.1, 'So is this')
message('THis is a message!')
'This is a message!'
str.vec <- c('This', 'is', 'a', 'vector', 'of', 'strings', '!')
str.vec
pnorm(1.65)
pnorm(2)
pnorm(3)
qnorm(0.9986501)
qnorm(pnorm(3))
qt(0.05, 21, lower.tail=FALSE)\
qt(0.05, 21, lower.tail=FALSE)
getwd()
dir()
setwd("C:/Users/Administrator/Desktop/R-Tutorial/data-sets")
dir()
home.prices <- read.csv('3yr-home-prices.csv')
head(home.prices)
home.prices$X2004
mean(home.prices$X2004)
mean(home.prices$X2004, na.rm=TRUE)
mean(home.prices$X2005, na.rm=TRUE)
mean(home.prices$X2006, na.rm=TRUE)
head(home.prices[X2004:X2006])
head(home.prices["X2004":"X2006"])
head(home.prices[3:5])
head(home.prices['X2004'])
head(home.prices[c('X2004', 'X2005', 'X2006')])
home.prices([1:10, 1:5])
home.prices[1:10, 1:5]
home.prices[1:10, 3:5]
home.prices[1:10, c('Metropolitan.Area', 'X2004')]
home.prices[1:10, 1:5]
home.prices[1:10, ]
home.prices[, 3:4]
home.prices[1:10, ]
home.prices[2,4]
subset(home.prices, X2004 >= 500)
subset(home.prices, X2004 <= 120 & X2006 >= 150)
getwd()
setwd("C:/Users/Administrator/Desktop/R-Tutorial/data-sets")
getwd()
dir()
home.prices <- read.csv('3yr-home-prices.csv')
head(home.prices)
home.prices$X2005
nrow(home.prices)
ncol(home.prices)
colnames(home.prices)
home.prices[1:10, ]
home.prices[1:10, 3:5]
home.prices[1:10, c('X2004', 'X2005', 'X2006')]
home.prices[1, 'X2006']
home.prices[1, 5]
subset(home.prices, X2004 >= 400)
v <- c(1,2,3,4,5)
v
v <- 1:5
v
ex.df <- data.frame(Col.A=c(1,2,3,4,5), Col.B=c(6,7,8,9,10), Col.C=c(11,12,13,14,15))
ex.df
rbind(ex.df, c(20, 30, 40))
ex.df
ex.df2 <- data.frame(Col.A=c(60), Col.B=c(70), Col.C=c(80))
ex.df2
rbind(ex.df, ex.df2)
ex.df3 <- rbind(ex.df, ex.df2)
ex.df3
ex.df4 <- data.frame(Col.D=55:60, Col.E=70:75)
ex.df4
cbind(ex.df3, ex.df4)
head(home.prices)
d2 <- data.frame(ID=d1$ID, Met.Area=d1$Metropolitan.Area, Year=rep(2004, nrow(d1)),
Med.Price=d1$X2004)
dir()
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
d2 <- data.frame(ID=d1$ID, Met.Area=d1$Metropolitan.Area, Year=rep(2004, nrow(d1)),
Med.Price=d1$X2004)
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
head(d2)
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/boxplot.R')
x <- 4
y <- 5
x + y
v <- c(3,6,9,12)
v
v[3]
v[2:4]
v
v[c(1,2,4)]
2:4
1:100
13:125
3
13:125
2 * 13:125
13:125 + 5
1:10
seq(1, 10)
seq(1, 100)
seq(1, 100, by=3)
seq(1, 100, by=4)
seq(100, 1, by=-1)
seq(100, 1, by=-3)
seq(100, 1, by=-3.14159)
rep(1, 5)
rep(c(1,3,5), 5)
rep(rep(c(1,3,5), 5), 3)
v <- rep(c(1,3,5), 5)
rep(v, 5)
rep(v, 3)
rep(c(1,3,5), 15)
v <- 1:99
v
v[100] <- NA
v
mean(v)
mean(v, na.rm=TRUE)
sd(v)
sd(v, na.rm=TRUE)
var(v, na.rm=TRUE)
median(v, na.rm=TRUE)
length(v)
v[101] <- 45
length(v)
str <- 'THis is a string!'
str
str.vec <- c('This', 'is', 'a', 'string', 'vector', '!')
str.vec
str.vec[2]
str.vec[2:4]
paste('A', 'B', 'C')
paste('A', 'B', 'C', 4)
4 + 5
'4' + 5
message('Hello!')
"Hello!"
x
y
message(paste('X is:', x, 'and Y is:', y, 'and the sum is:', x + y))
x <- 12
y <- 17
message(paste('X is:', x, 'and Y is:', y, 'and the sum is:', x + y))
paste('A', 'B', 'C')
paste('A', 'B', 'C', sep='---')
paste('A', 'B', 'C', sep='')
pnorm(1.65)
pnorm(1.96)
qnorm(0.99)
pnorm(qnorm(0.99))
getwd()
setwd("C:/Users/Administrator/Desktop/R-Tutorial/data-sets")
dir()
home.prices <- read.csv('3yr-home-prices.csv')
home.prices <- read.csv('3yr-home-prices.csv')
home.prices <- read.csv('3yr-home-prices.csv')
head(home.prices)
nrow(home.prices)
ncol(home.prices)
colnames(home.prices)
home.prices$X2004
mean(home.prices$X2004)
mean(home.prices$X2004, na.rm=TRUE)
mean(home.prices$X2005, na.rm=TRUE)
mean(home.prices$X2006, na.rm=TRUE)
head(home.prices[3:5])
head(home.prices[c('X2004', 'X2005', 'X2006')])
head(home.prices['X2004'])
head(home.prices[3])
home.prices[1:10, 3:5]
home.prices[1:10]
home.prices[1:10, 3:5]
home.prices[1:10, 5:5]
home.prices[1:10, 1:5]
home.prices[1:10, ]
home.prices[, 3:5]
home.prices
home.prices[,]
home.prices[1:10,]
home.prices[3, 4]
home.prices[3, 'X2004']
home.prices[3, 'X2005']
home.prices$X2005
subset(home.prices, X2004 >= 500)
subset(home.prices, X2004 <= 120 & X2006 >= 160)
subset(home.prices, X2004 <= 120 & X2006 >= 160)[c('X2004', 'X2006')]
v <- c(2,3,6 ,7,8)
v
e1 <- data.frame(A=c(1,2,3,4,5), B=c(6,7,8,9,10), C=c(11,12,13,14,15))
e1
rbind(e1, c(20,30,40))
e1
e2 <- data.frame(A=c(20, 30), B=(40, 50), C=c(50, 60))
e2
e2 <- data.frame(A=c(20, 30), B=c(40, 50), C=c(50, 60))
e2
rbind(e1, e2)
e3 <- data.frame(D=80:84, E=85:89)
e3
cbind(e1, e3)
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/s4-boxplot.R')
head(d2)
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/s4-boxplot.R')
nrow(d5)
nrow(d1) * 3
head(d5)
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/s4-boxplot.R')
source('C:/Users/Administrator/Desktop/R-Tutorial/data-sets/s4-boxplot.R')
setwd("C:/Users/Administrator/Desktop/R-Tutorial/data-sets")
home.prices <- read.csv('3yr-home-prices.csv')
head(home.prices)
d <- home.prices
head(d)
plot(d$X2004, d$X2005)
plot(d$X2004, d$X2005, main='2004 vs. 2005 Prices',
xlab='2004', ylab='2005')
plot(d$X2004, d$X2005, main='2004 vs. 2005 Prices',
xlab='2004', ylab='2005',
col='blue'
pch=17)
plot(d$X2004, d$X2005, main='2004 vs. 2005 Prices',
xlab='2004', ylab='2005',
col='blue'
,
pch=17)
plot(d$X2004, d$X2006, main='2004 vs. 2006 Prices',
xlab='2004', ylab='2006',
col='blue',
pch=17)
